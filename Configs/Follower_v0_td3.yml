Follower_v0:
    env: mini-grid
    run: TD3
    local_dir: /media/grartem/B7DB5B36121B73AA/Projects/RL_robots/RL_ray_tests/results
    checkpoint_freq: 1
    stop:
        episode_reward_mean: 50        
    config:
        # Works for both torch and tf.
        env_config:
            name: MiniGrid-FollowTheLeader-curve-20x20-v0
            framestack: 4
        #framework: tf2
        num_gpus: 1
        timesteps_per_iteration: 4000

        # === Model ===
        n_step: 5
        num_workers: 2
        model: {
            #custom_model: MyFCNet,
            conv_filters: [[64, [4, 4], 1], [64, [3, 3], 1], [256, [28, 7], 1]], # last should have same output shape as the input data
            fcnet_hiddens: [64, 64],
            fcnet_activation: relu,
            no_final_linear: True
        }
        twin_q: True
        use_state_preprocessor: True
        actor_hiddens: [64, 64]
        critic_hiddens: [64, 64]
        gamma: 0.99
        lr: .00001
        #learning_starts: 1000
        replay_buffer_config:
            capacity: 50000
        batch_mode: complete_episodes
        #rollout_fragment_length: 8
        train_batch_size: 768
        # === Exploration ===
        exploration_config: 
            # DDPG uses OrnsteinUhlenbeck (stateful) noise to be added to NN-output
            # actions (after a possible pure random phase of n timesteps).
            type: OrnsteinUhlenbeckNoise
            # For how many timesteps should we return completely random actions,
            # before we start adding (scaled) noise?
            random_timesteps: 1000,
            # The OU-base scaling factor to always apply to action-added noise.
            ou_base_scale: 0.1,
            # The OU theta param.
            ou_theta: 0.15,
            # The OU sigma param.
            ou_sigma: 0.2,
            # The initial noise scaling factor.
            initial_scale: 1.0,
            # The final noise scaling factor.
            final_scale: 0.02,
            # Timesteps over which to anneal scale (from initial to final values).
            scale_timesteps: 10000,
        prioritized_replay: True
        